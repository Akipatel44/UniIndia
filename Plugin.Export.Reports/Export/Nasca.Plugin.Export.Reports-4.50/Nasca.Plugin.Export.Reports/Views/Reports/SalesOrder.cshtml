@model SalesOrderSearchModel

@inject IStoreService storeService
@using Nop.Services.Stores

@{
    //page title and style
    Layout = "_AdminLayout";
    ViewBag.PageTitle = T("Nasca.Plugin.Export.Reports.Sales").Text;
    NopHtml.SetActiveMenuItemSystemName("SalesReport");
}

@{
    const string hideSearchBlockAttributeName = "ReportOrdersPage.HideSearchBlock";
    var hideSearchBlock = await genericAttributeService.GetAttributeAsync<bool>(await workContext.GetCurrentCustomerAsync(), hideSearchBlockAttributeName);
    var orderSummaryColumnNumber = 4;
}
<form asp-controller="CustomReports" asp-action="List" method="post">
    <div class="content-header clearfix">
        <h1 class="float-left">
            @T("Nasca.Plugin.Export.Reports.Sales")
        </h1>
        <div class="float-right">
            <div class="btn-group">
                <button asp-action="SalesExportExcel" type="submit" name="exportexcel-all" class="btn btn-success"> 
                    <i class="fas fa-download"></i>
                    @T("Admin.Common.Export")
                </button>
            </div>
        </div>
    </div>
    <section class="content">
        <div class="container-fluid">
            <div class="form-horizontal">
                <div class="cards-group">
                    <div class="card card-default card-search">
                        <div class="card-body">
                            <div class="row search-row @(!hideSearchBlock ? "opened" : "")" data-hideAttribute="@hideSearchBlockAttributeName">
                                <div class="search-text">@T("Admin.Common.Search")</div>
                                <div class="icon-search"><i class="fas fa-search" aria-hidden="true"></i></div>
                                <div class="icon-collapse"><i class="far fa-angle-@(!hideSearchBlock ? "up" : "down")" aria-hidden="true"></i></div>
                            </div>
                            <div class="search-body @(hideSearchBlock ? "closed" : "")">
                                <div class="row">
                                    <div class="col-md-5">
                                        <div class="form-group row">
                                            <div class="col-md-4">
                                                <nop-label asp-for="StartDate" />
                                            </div>
                                            <div class="col-md-8">
                                                <nop-editor asp-for="StartDate" />
                                            </div>
                                        </div>
                                        <div class="form-group row">
                                            <div class="col-md-4">
                                                <nop-label asp-for="EndDate" />
                                            </div>
                                            <div class="col-md-8">
                                                <nop-editor asp-for="EndDate" />
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-7">
                                        <div class="form-group row" @(Model.AvailableVendors.SelectionIsNotPossible() || Model.IsLoggedInAsVendor ? Html.Raw("style='display: none;'") : null)>
                                            <div class="col-md-4">
                                                <nop-label asp-for="VendorId" />
                                            </div>
                                            <div class="col-md-8">
                                                <nop-select asp-for="VendorId" asp-items="Model.AvailableVendors" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="text-center col-12">
                                        <button type="button" id="search-orders" class="btn btn-primary btn-search">
                                            <i class="fas fa-search"></i>
                                            @T("Admin.Common.Search")
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card card-default">
                        <div class="card-body">
                            @{
                                var gridModel = new DataTablesModel
                                {
                                    Name = "orders-grid",
                                    UrlRead = new DataUrl("SalesOrderList", "CustomReports", null),
                                    SearchButtonId = "search-orders",
                                    Length = Model.PageSize,
                                    LengthMenu = Model.AvailablePageSizes,
                                    FooterCallback = "ordersfootercallback",
                                    FooterColumns = 9,
                                    Filters = new List<FilterParameter>
                                                                            {
                                        new FilterParameter(nameof(Model.StartDate), typeof(DateTime?)),
                                        new FilterParameter(nameof(Model.EndDate), typeof(DateTime?)),
                                        new FilterParameter(nameof(Model.StoreId)),
                                        new FilterParameter(nameof(Model.VendorId)),
                                        new FilterParameter(nameof(Model.BillingCountryId)),
                                        new FilterParameter(nameof(Model.ProductId)),
                                        new FilterParameter(nameof(Model.OrderStatusIds)),
                                        new FilterParameter(nameof(Model.PaymentStatusIds)),
                                    }
                                };
                                gridModel.ColumnCollection = new List<ColumnProperty>
                                {
                                    new ColumnProperty(nameof(SalesOrderModel.Id))
                                    {
                                        IsMasterCheckBox = true,
                                        Render = new RenderCheckBox("checkbox_orders"),
                                        ClassName =  NopColumnClassDefaults.CenterAll,
                                        Width = "50"
                                    },
                                    new ColumnProperty(nameof(SalesOrderModel.CustomOrderNumber))
                                    {
                                        Title = T("Admin.Orders.Fields.CustomOrderNumber").Text,
                                        Width = "80"
                                    }
                                };
                                //a vendor does not have access to this functionality
                                if (!Model.IsLoggedInAsVendor)
                                {
                                    gridModel.ColumnCollection.Add(new ColumnProperty(nameof(SalesOrderModel.OrderStatus))
                                    {
                                        Title = T("Admin.Orders.Fields.OrderStatus").Text,
                                        Width = "100",
                                        Render = new RenderCustom("renderColumnOrderStatus")
                                    });
                                }
                      
                                //a vendor does not have access to this functionality
                                if (!Model.IsLoggedInAsVendor)
                                {
                                    gridModel.ColumnCollection.Add(new ColumnProperty(nameof(SalesOrderModel.ShippingStatus))
                                    {
                                        Title = T("Admin.Orders.Fields.ShippingStatus").Text,
                                        Width = "150"
                                    });
                                }
                                gridModel.ColumnCollection.Add(new ColumnProperty(nameof(SalesOrderModel.StoreName))
                                {
                                    Title = T("Admin.Orders.Fields.Store").Text,
                                    Width = "100",
                                    Visible = (await storeService.GetAllStoresAsync()).Count > 1
                                });
                                gridModel.ColumnCollection.Add(new ColumnProperty(nameof(SalesOrderModel.CreatedOn))
                                {
                                    Title = T("Admin.Orders.Fields.CreatedOn").Text,
                                    Width = "120",
                                    Render = new RenderDate()
                                });
                                //a vendor does not have access to this functionality        

                                gridModel.ColumnCollection.Add(new ColumnProperty(nameof(SalesOrderModel.OrderSubtotalExclTax))
                                {
                                    Title = T("Nasca.Plugin.Export.Reports.SubTotal").Text,
                                    Width = "100",
                                });

                                gridModel.ColumnCollection.Add(new ColumnProperty(nameof(SalesOrderModel.OrderTotalDiscount))
                                {
                                    Title = T("Admin.catalog.products.fields.discounts").Text,
                                    Width = "100",
                                });

                                gridModel.ColumnCollection.Add(new ColumnProperty(nameof(SalesOrderModel.RedeemedRewardPointsAmount))
                                {
                                    Title = T("Admin.Orders.Fields.RedeemedRewardPoints").Text,
                                    Width = "100",
                                });

                                gridModel.ColumnCollection.Add(new ColumnProperty(nameof(SalesOrderModel.Tax))
                                {
                                    Title = T("Admin.Orders.Report.Tax").Text,
                                    Width = "100",
                                });

                                gridModel.ColumnCollection.Add(new ColumnProperty(nameof(SalesOrderModel.OrderShippingExclTax))
                                {
                                    Title = T("Admin.Orders.Report.Shipping").Text,
                                    Width = "100",
                                });

                                if (!Model.IsLoggedInAsVendor)
                                {
                                    gridModel.ColumnCollection.Add(new ColumnProperty(nameof(SalesOrderModel.OrderTotal))
                                    {
                                        Title = T("Admin.Orders.Report.Total").Text,
                                        Width = "100",
                                    });
                                }
                                gridModel.ColumnCollection.Add(new ColumnProperty(nameof(SalesOrderModel.Id))
                                {
                                    Title = T("Admin.Common.View").Text,
                                    Width = "50",
                                    ClassName = NopColumnClassDefaults.Button,
                                    Render = new RenderButtonView(new DataUrl("~/Admin/Order/Edit", nameof(SalesOrderModel.Id)))
                                });
                                orderSummaryColumnNumber = 8;
                            }
                            
                            @await Html.PartialAsync("Table", gridModel)
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</form>

@*export selected (XML). We don't use GET approach because it's limited to 2K-4K chars and won't work for large number of entities*@
<form asp-controller="Orders" asp-action="ExportXmlSelected" method="post" id="export-xml-selected-form">
    <input type="hidden" id="selectedIds" name="selectedIds" value="" />
</form>

<script>
    $(document).ready(function () {
        $('#exportxml-selected').click(function (e) {
            e.preventDefault();
            var ids = selectedIds.join(",");
            if (!ids) {
                $('#exportXmlSelected-info').text("@T("Admin.Orders.NoOrders")");
                $("#exportXmlSelected").click();
            }
            else {
                $('#export-xml-selected-form #selectedIds').val(ids);
                $('#export-xml-selected-form').submit();
                updateTable('#orders-grid');
            }
            return false;
        });
    });
</script>
<nop-alert asp-alert-id="exportXmlSelected" />

@*export selected (Excel). We don't use GET approach because it's limited to 2K-4K chars and won't work for large number of entities*@
<form asp-controller="CustomReports" asp-action="ExportExcelSelected" method="post" id="export-excel-selected-form">
    <input type="hidden" id="selectedIds" name="selectedIds" value="" />
</form>

<script>
    $(document).ready(function () {
        $('#exportexcel-selected').click(function (e) {
            e.preventDefault();
            var ids = selectedIds.join(",");
             if (!ids) {
                $('#exportExcelSelected-info').text("@T("Admin.Orders.NoOrders")");
                $("#exportExcelSelected").click();
            }
            else {
                $('#export-excel-selected-form #selectedIds').val(ids);
                $('#export-excel-selected-form').submit();
                updateTable('#orders-grid');
            }
            return false;
        });
    });
</script>
<nop-alert asp-alert-id="exportExcelSelected" />

@*Print packaging slips selected (XML). We don't use GET approach because it's limited to 2K-4K chars and won't work for large number of entities*@
<form asp-controller="CustomReports" asp-action="PdfInvoiceSelected" method="post" id="pdf-invoice-selected-form">
    <input type="hidden" id="selectedIds" name="selectedIds" value="" />
</form>

<script>
    $(document).ready(function () {
        $('#pdf-invoice-selected').click(function (e) {
            e.preventDefault();
            var ids = selectedIds.join(",");
           if (!ids) {
                $('#pdfInvoiceSelected-info').text("@T("Admin.Orders.NoOrders")");
                $("#pdfInvoiceSelected").click();
            }
            else {
                $('#pdf-invoice-selected-form #selectedIds').val(ids);
                $('#pdf-invoice-selected-form').submit();
                updateTable('#orders-grid');
            }
            return false;
        });
    });

function ordersfootercallback(tfoot, data, start, end, display) {
        //update order totals summary
        var postData = {
            StartDate: $('#@Html.IdFor(model => model.StartDate)').val(),
            EndDate: $('#@Html.IdFor(model => model.EndDate)').val(),
            StoreId: $('#@Html.IdFor(model => model.StoreId)').val(),
            VendorId: $('#@Html.IdFor(model => model.VendorId)').val(),
            OrderStatusIds: $('#@Html.IdFor(model => model.OrderStatusIds)').val(),
            PaymentStatusIds: $('#@Html.IdFor(model => model.PaymentStatusIds)').val(),
            PageSize: $('#@Html.IdFor(model => model.PageSize)').val(),
            Page:$('#@Html.IdFor(model => model.Page)').val(),
            Length:$('#@Html.IdFor(model => model.Length)').val(),

        };
        addAntiForgeryToken(postData);

        $.ajax({
            cache: false,
            type: "POST",
            url: "@(Url.Action("ReportAggregates", "CustomReports"))",
            data: postData,
            success: function (data, textStatus, jqXHR) {
                if (data) {
                    for (var key in data) {
                            var reportSummary = '<div><strong>@T("Admin.Orders.Report.Summary").Text</strong></div>' +
                                '<div>@T("Nasca.Plugin.Export.Reports.SubTotal").Text <span>' + data['Aggregatorsubtotal'] + '</span></div>' +
                                '<div>@T("admin.catalog.products.fields.discounts").Text <span>' + data['Aggregatorvouchars'] + '</span></div>' +
                                '<div>@T("admin.orders.fields.redeemedrewardpoints").Text <span>' + data['Aggregatorpoints'] + '</span></div>' +
                                '<div>@T("Admin.Orders.Report.Shipping").Text <span>' + data['Aggregatorshipping'] + '</span></div>' +
                                '<div>@T("Admin.Orders.Report.Tax").Text <span>' + data['Aggregatortax'] + '</span></div>' +
                                '<div>@T("Admin.Orders.Report.Total").Text <span>' + data['Aggregatortotal'] + '</span></div>'
                            var orderTotalsColumn = $('#orders-grid').DataTable().column(@(orderSummaryColumnNumber));
                            $(orderTotalsColumn.footer()).html(reportSummary);
                    }
                }
            }
        });
    }

    function renderColumnOrderStatus(data, type, row, meta) {
        var color;
        switch (row.OrderStatusId) {
            case 10:
                color = 'yellow';
                break;
            case 20:
                color = 'blue';
                break;
            case 30:
                color = 'green';
                break;
            case 40:
                color = 'red';
                break;
        }
        return '<span class="grid-report-item ' + color + '">' + data + '</span >';
    }
</script>
<nop-alert asp-alert-id="pdfInvoiceSelected" />
