@model MiniShoppingCartModel

@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Services.Catalog

@inject IPriceFormatter priceFormatter
@inject IWorkContext workContext

@{
    if (String.IsNullOrEmpty(Model.SubTotal))
    {
        Model.SubTotal = await priceFormatter.FormatPriceAsync(0m, false, (await workContext.GetWorkingCurrencyAsync()).CurrencyCode, (await workContext.GetWorkingLanguageAsync()).Id, true);
    }
}
<div class="cart-wrapper" id="flyout-cart" data-removeItemFromCartUrl="@Url.Action("RemoveItemFromCart", "UptownTheme")" data-flyoutCartUrl="@Url.Action("FlyoutShoppingCart", "UptownTheme")">
    <div id="topcartlink">
        <a href="@Url.RouteUrl("ShoppingCart")" class="ico-cart">
            <span class="cart-label">@T("ShoppingCart")</span>
            <span class="cart-qty">@T("ShoppingCart.HeaderQuantity", Model.TotalProducts)</span>
        </a>
        <a href="@Url.RouteUrl("ShoppingCart")" title="@Model.SubTotal" class=" ico-cart-total">
            <span class="cart-total">@T("ShoppingCart.Totals.SubTotal"): <strong>@Model.SubTotal</strong></span>
        </a>
    </div>
    <div class="flyout-cart">
        <div class="mini-shopping-cart">
            <div class="count">
                @if (Model.TotalProducts == 0)
                {
                    <div class="no-items-message">
                        @T("ShoppingCart.Mini.NoItems")
                    </div>
                }
                else
                {
                    <div class="mini-shopping-cart-title">
                        @T("ShoppingCart")
                    </div>
                    <a href="@Url.RouteUrl("ShoppingCart")">@T("ShoppingCart.Mini.Items", Model.TotalProducts)</a>
                }
            </div>
            @if (Model.TotalProducts > 0)
            {
                <div class="items">
                    @for (int i = 0; i < Model.Items.Count; i++)
                    {
                        var item = Model.Items[i];
                        <div class="item @(i == 0 ? "first" : null)" data-shoppingCartId="@item.Id">
                            @if (Model.ShowProductImages)
                            {
                                <div class="picture">
                                	<a href="@(Url.RouteUrl<Product>(new { SeName = item.ProductSeName }))" title="@item.Picture.Title">
                                        <img alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" />
                                    </a>
                                </div>
                            }
                            <div class="product">
                                <div class="item-product-left">
                                    <div class="name">
                                		<a href="@(Url.RouteUrl<Product>(new { SeName = item.ProductSeName }))">@item.ProductName</a>
                                    </div>
                                    @if (!string.IsNullOrEmpty(item.AttributeInfo))
                                    {
                                        <div class="attributes">
                                            @Html.Raw(item.AttributeInfo)
                                        </div>
                                    }
                                </div>
                                <div class="item-product-right">
                                    <div class="price">@T("ShoppingCart.Mini.UnitPrice"): <span>@item.UnitPrice</span></div>
                                    <div class="quantity">@T("ShoppingCart.Mini.Quantity"): <span>@item.Quantity</span></div>
                                </div>
                            </div>
                            <a href="#" class="mini-shopping-cart-item-close">Close</a>
                        </div>
                    }
                </div>
                <div class="totals">@T("ShoppingCart.Totals.SubTotal"): <strong>@Model.SubTotal</strong></div>
                @* <div class="buttons">
                    @if (Model.DisplayShoppingCartButton)
                    {
                        <button type="button" class="button-1 cart-button" onclick="setLocation('@(Url.RouteUrl("ShoppingCart"))')">@T("ShoppingCart.Mini.ViewCart")</button>
                    }
                    @if (Model.DisplayCheckoutButton)
                    {
                        string checkoutUrl;
                        if (Model.AnonymousCheckoutAllowed && Model.CurrentCustomerIsGuest)
                        {
                            checkoutUrl = Url.RouteUrl("LoginCheckoutAsGuest", new { returnUrl = Url.RouteUrl("ShoppingCart") });
                        }
                        else
                        {
                            checkoutUrl = Url.RouteUrl("Checkout");
                        }
                        <button type="button" class="button-1 checkout-button" onclick="setLocation('@checkoutUrl')">@T("Checkout.Button")</button>
                    }
                </div> *@
            }
        </div>
    </div>
</div>  