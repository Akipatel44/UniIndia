@model HeaderLinksModel
@using Nop.Core.Domain.Customers
@inject Nop.Core.IWebHelper webHelper

<div class="header-links" style="margin-right:225px; display:flex;">
	@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderLinksBefore, additionalData = Model })
    @* <div class="my-account-dropdown-wrapper"> *@
        @* @if (Model.IsAuthenticated)
        {
            <a href="@Url.RouteUrl("CustomerInfo")" class="my-account-opener my-account-link">@T("Account.MyAccount")@Model.CustomerEmailUsername</a>
        }
        else
        {
            <a href="@Url.RouteUrl("Login")" class="my-account-opener login-link">@T("Account.MyAccount")</a>
        } *@
        @* <div class="my-account-dropdown"> *@
            @if (Model.IsAuthenticated)
            {
                @await Component.InvokeAsync("CustomerNavigation")
                <a href="@Url.RouteUrl("Logout")" class="ico-logout">@T("Account.Logout")</a>
            }
            else
            {
	            var returnUrl = Context.Request.Query.TryGetValue("returnUrl", out var url) && !StringValues.IsNullOrEmpty(url) 
	                ? url.ToString()
	                : webHelper.GetRawUrl(Context.Request);
                <ul>
                    <li><a href="@Url.RouteUrl("Login", new { returnUrl })" class="ico-login">@T("Account.Login")</a></li>
                    @if (Model.RegistrationType != UserRegistrationType.Disabled)
                    {
                        <li><a href="@Url.RouteUrl("Register", new { returnUrl })" class="ico-register">@T("Account.Register")</a></li>
                    }
                </ul>
                @await Component.InvokeAsync("ExternalMethods", "ExternalAuthentication")
            }
        @* </div> *@
    @* </div> *@
    @if (Model.AllowPrivateMessages)
    {
        <a href="@Url.RouteUrl("PrivateMessages", new { tab = "" })" class="ico-inbox">
            <span class="inbox-label">@T("PrivateMessages.Inbox")</span>
            <span class="inbox-unread">@Model.UnreadPrivateMessages</span>
        </a>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksAfter, additionalData = Model })
  @*   @if (Model.WishlistEnabled)
    {
        <a href="@Url.RouteUrl("Wishlist")" class="ico-wishlist">
            <span class="wishlist-label">@T("Wishlist")</span>
            <span class="wishlist-qty">@T("Wishlist.HeaderQuantity", Model.WishlistItems)</span>
        </a>
    } *@
    @if (!Model.IsAuthenticated)
    {
        @await Component.InvokeAsync("ExternalMethods", "ExternalAuthentication")
    }
    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderLinksAfter, additionalData = Model })
    @if (Model.AllowPrivateMessages && !string.IsNullOrEmpty(Model.AlertMessage))
    {
        //new private message notification
        <script asp-location="Footer">
            $(document).ready(function () {
                displayPopupNotification('@Html.Raw(JavaScriptEncoder.Default.Encode(Model.AlertMessage))', 'success', false);
            });
        </script>
    }
    @if (Model.ShoppingCartEnabled)
    {
        <script asp-location="Footer">
            $(document).ready(function () {
                $('.header').on('mouseenter', '#flyout-cart', function () {
                    $(this).addClass('active');
                }).on('mouseleave', '#flyout-cart', function () {
                    $(this).removeClass('active');
                });
            });
        </script>
    }
</div>
